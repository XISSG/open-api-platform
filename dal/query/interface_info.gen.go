// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xissg/open-api-platform/dal/model"
)

func newInterfaceInfo(db *gorm.DB, opts ...gen.DOOption) interfaceInfo {
	_interfaceInfo := interfaceInfo{}

	_interfaceInfo.interfaceInfoDo.UseDB(db, opts...)
	_interfaceInfo.interfaceInfoDo.UseModel(&model.InterfaceInfo{})

	tableName := _interfaceInfo.interfaceInfoDo.TableName()
	_interfaceInfo.ALL = field.NewAsterisk(tableName)
	_interfaceInfo.ID = field.NewInt64(tableName, "id")
	_interfaceInfo.Name = field.NewString(tableName, "name")
	_interfaceInfo.Description = field.NewString(tableName, "description")
	_interfaceInfo.URL = field.NewString(tableName, "url")
	_interfaceInfo.RequestHeader = field.NewString(tableName, "request_header")
	_interfaceInfo.ResponseHeader = field.NewString(tableName, "response_header")
	_interfaceInfo.Status = field.NewInt32(tableName, "status")
	_interfaceInfo.Method = field.NewString(tableName, "method")
	_interfaceInfo.UserID = field.NewInt64(tableName, "user_id")
	_interfaceInfo.CreateTime = field.NewTime(tableName, "create_time")
	_interfaceInfo.UpdateTime = field.NewTime(tableName, "update_time")
	_interfaceInfo.IsDelete = field.NewInt32(tableName, "is_delete")

	_interfaceInfo.fillFieldMap()

	return _interfaceInfo
}

type interfaceInfo struct {
	interfaceInfoDo

	ALL            field.Asterisk
	ID             field.Int64  // 主键
	Name           field.String // 名称
	Description    field.String // 描述
	URL            field.String // 接口地址
	RequestHeader  field.String // 请求头
	ResponseHeader field.String // 响应头
	Status         field.Int32  // 接口状态(0-关闭， 1-开启)
	Method         field.String // 请求类型
	UserID         field.Int64  // 创建人
	CreateTime     field.Time   // 创建时间
	UpdateTime     field.Time   // 更新时间
	IsDelete       field.Int32  // 是否删除(0-未删除，1-删除)

	fieldMap map[string]field.Expr
}

func (i interfaceInfo) Table(newTableName string) *interfaceInfo {
	i.interfaceInfoDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i interfaceInfo) As(alias string) *interfaceInfo {
	i.interfaceInfoDo.DO = *(i.interfaceInfoDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *interfaceInfo) updateTableName(table string) *interfaceInfo {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewInt64(table, "id")
	i.Name = field.NewString(table, "name")
	i.Description = field.NewString(table, "description")
	i.URL = field.NewString(table, "url")
	i.RequestHeader = field.NewString(table, "request_header")
	i.ResponseHeader = field.NewString(table, "response_header")
	i.Status = field.NewInt32(table, "status")
	i.Method = field.NewString(table, "method")
	i.UserID = field.NewInt64(table, "user_id")
	i.CreateTime = field.NewTime(table, "create_time")
	i.UpdateTime = field.NewTime(table, "update_time")
	i.IsDelete = field.NewInt32(table, "is_delete")

	i.fillFieldMap()

	return i
}

func (i *interfaceInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *interfaceInfo) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 12)
	i.fieldMap["id"] = i.ID
	i.fieldMap["name"] = i.Name
	i.fieldMap["description"] = i.Description
	i.fieldMap["url"] = i.URL
	i.fieldMap["request_header"] = i.RequestHeader
	i.fieldMap["response_header"] = i.ResponseHeader
	i.fieldMap["status"] = i.Status
	i.fieldMap["method"] = i.Method
	i.fieldMap["user_id"] = i.UserID
	i.fieldMap["create_time"] = i.CreateTime
	i.fieldMap["update_time"] = i.UpdateTime
	i.fieldMap["is_delete"] = i.IsDelete
}

func (i interfaceInfo) clone(db *gorm.DB) interfaceInfo {
	i.interfaceInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i interfaceInfo) replaceDB(db *gorm.DB) interfaceInfo {
	i.interfaceInfoDo.ReplaceDB(db)
	return i
}

type interfaceInfoDo struct{ gen.DO }

type IInterfaceInfoDo interface {
	gen.SubQuery
	Debug() IInterfaceInfoDo
	WithContext(ctx context.Context) IInterfaceInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInterfaceInfoDo
	WriteDB() IInterfaceInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInterfaceInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInterfaceInfoDo
	Not(conds ...gen.Condition) IInterfaceInfoDo
	Or(conds ...gen.Condition) IInterfaceInfoDo
	Select(conds ...field.Expr) IInterfaceInfoDo
	Where(conds ...gen.Condition) IInterfaceInfoDo
	Order(conds ...field.Expr) IInterfaceInfoDo
	Distinct(cols ...field.Expr) IInterfaceInfoDo
	Omit(cols ...field.Expr) IInterfaceInfoDo
	Join(table schema.Tabler, on ...field.Expr) IInterfaceInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInterfaceInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInterfaceInfoDo
	Group(cols ...field.Expr) IInterfaceInfoDo
	Having(conds ...gen.Condition) IInterfaceInfoDo
	Limit(limit int) IInterfaceInfoDo
	Offset(offset int) IInterfaceInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInterfaceInfoDo
	Unscoped() IInterfaceInfoDo
	Create(values ...*model.InterfaceInfo) error
	CreateInBatches(values []*model.InterfaceInfo, batchSize int) error
	Save(values ...*model.InterfaceInfo) error
	First() (*model.InterfaceInfo, error)
	Take() (*model.InterfaceInfo, error)
	Last() (*model.InterfaceInfo, error)
	Find() ([]*model.InterfaceInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InterfaceInfo, err error)
	FindInBatches(result *[]*model.InterfaceInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InterfaceInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInterfaceInfoDo
	Assign(attrs ...field.AssignExpr) IInterfaceInfoDo
	Joins(fields ...field.RelationField) IInterfaceInfoDo
	Preload(fields ...field.RelationField) IInterfaceInfoDo
	FirstOrInit() (*model.InterfaceInfo, error)
	FirstOrCreate() (*model.InterfaceInfo, error)
	FindByPage(offset int, limit int) (result []*model.InterfaceInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInterfaceInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i interfaceInfoDo) Debug() IInterfaceInfoDo {
	return i.withDO(i.DO.Debug())
}

func (i interfaceInfoDo) WithContext(ctx context.Context) IInterfaceInfoDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i interfaceInfoDo) ReadDB() IInterfaceInfoDo {
	return i.Clauses(dbresolver.Read)
}

func (i interfaceInfoDo) WriteDB() IInterfaceInfoDo {
	return i.Clauses(dbresolver.Write)
}

func (i interfaceInfoDo) Session(config *gorm.Session) IInterfaceInfoDo {
	return i.withDO(i.DO.Session(config))
}

func (i interfaceInfoDo) Clauses(conds ...clause.Expression) IInterfaceInfoDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i interfaceInfoDo) Returning(value interface{}, columns ...string) IInterfaceInfoDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i interfaceInfoDo) Not(conds ...gen.Condition) IInterfaceInfoDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i interfaceInfoDo) Or(conds ...gen.Condition) IInterfaceInfoDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i interfaceInfoDo) Select(conds ...field.Expr) IInterfaceInfoDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i interfaceInfoDo) Where(conds ...gen.Condition) IInterfaceInfoDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i interfaceInfoDo) Order(conds ...field.Expr) IInterfaceInfoDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i interfaceInfoDo) Distinct(cols ...field.Expr) IInterfaceInfoDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i interfaceInfoDo) Omit(cols ...field.Expr) IInterfaceInfoDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i interfaceInfoDo) Join(table schema.Tabler, on ...field.Expr) IInterfaceInfoDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i interfaceInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInterfaceInfoDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i interfaceInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IInterfaceInfoDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i interfaceInfoDo) Group(cols ...field.Expr) IInterfaceInfoDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i interfaceInfoDo) Having(conds ...gen.Condition) IInterfaceInfoDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i interfaceInfoDo) Limit(limit int) IInterfaceInfoDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i interfaceInfoDo) Offset(offset int) IInterfaceInfoDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i interfaceInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInterfaceInfoDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i interfaceInfoDo) Unscoped() IInterfaceInfoDo {
	return i.withDO(i.DO.Unscoped())
}

func (i interfaceInfoDo) Create(values ...*model.InterfaceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i interfaceInfoDo) CreateInBatches(values []*model.InterfaceInfo, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i interfaceInfoDo) Save(values ...*model.InterfaceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i interfaceInfoDo) First() (*model.InterfaceInfo, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InterfaceInfo), nil
	}
}

func (i interfaceInfoDo) Take() (*model.InterfaceInfo, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InterfaceInfo), nil
	}
}

func (i interfaceInfoDo) Last() (*model.InterfaceInfo, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InterfaceInfo), nil
	}
}

func (i interfaceInfoDo) Find() ([]*model.InterfaceInfo, error) {
	result, err := i.DO.Find()
	return result.([]*model.InterfaceInfo), err
}

func (i interfaceInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InterfaceInfo, err error) {
	buf := make([]*model.InterfaceInfo, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i interfaceInfoDo) FindInBatches(result *[]*model.InterfaceInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i interfaceInfoDo) Attrs(attrs ...field.AssignExpr) IInterfaceInfoDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i interfaceInfoDo) Assign(attrs ...field.AssignExpr) IInterfaceInfoDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i interfaceInfoDo) Joins(fields ...field.RelationField) IInterfaceInfoDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i interfaceInfoDo) Preload(fields ...field.RelationField) IInterfaceInfoDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i interfaceInfoDo) FirstOrInit() (*model.InterfaceInfo, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InterfaceInfo), nil
	}
}

func (i interfaceInfoDo) FirstOrCreate() (*model.InterfaceInfo, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InterfaceInfo), nil
	}
}

func (i interfaceInfoDo) FindByPage(offset int, limit int) (result []*model.InterfaceInfo, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i interfaceInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i interfaceInfoDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i interfaceInfoDo) Delete(models ...*model.InterfaceInfo) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *interfaceInfoDo) withDO(do gen.Dao) *interfaceInfoDo {
	i.DO = *do.(*gen.DO)
	return i
}
